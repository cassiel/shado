-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent

* S H A D O   M A N U A L

This file will eventually be a manual; for now, it's a working overview of the =shado= architecture and components, with some fragments of Lua code which show how it works. Read in conjunction with the Lua examples and the LuaDocs (forthcoming), it should be enough information to start writing =shado=-based applications.

** THE RENDERING MODEL

=shado= is a compositing and sprite library for the monome grid and arc, written in Lua. The interface to grid and arc is identical: an arc is just a 64-wide, 4-deep grid. =shado= also supports button tracking for grids, so that button presses and releases are correctly paired even if components move around on the device.

An application which uses =shado= will build structures of *frames*, *blocks* and *masks*. These objects know how to present themselves to a rendering object, which calls into the norns core library.

The =shado= library doesn't have things called sprites per se, but any structure of blocks, frames and masks can be manipulated and altered dynamically. If components are moved around relative to one another, or if their layering order or visibility are changed, the result is sprite-like animation.

** HISTORICAL NOTE

=shado= was originally written for the binary monome grid with on/off LEDs only. Variable brightness was retrofitted as described later, as an extension to the binary feature set described here.

** BLOCKS

A *block* is a two-dimensional matrix of data values representing grid or arc lights, or pixels. Each block pixel value (a type we refer to as a *lamp*) can have the obvious value =ON= or =OFF=; a lamp can also have the value =THRU= (which means "transparent": show whatever is beneath) or =FLIP= (invert whatever is beneath). It is possible to render a block directly to a device - the block is considered to be sitting on a black base, so =ON= and =FLIP= cause the lamp to light, and =OFF= and =THRU= turn it off.

Here's a simple 4 x 4 square of lights (see the example code for all the details of the required =require= statements):

#+BEGIN_SRC lua
  local g = grid.connect()
  local renderer = renderers.VariableBlockRenderer:new(16, 8, g)
  local block = blocks.Block:new(4, 4):fill(types.LampState.ON)
  renderer:render(block)
#+END_SRC

=Block:new(...):fill(...)= sets all pixels in the block. Alternatively, single pixels can be set (via =setLamp()=). =Block= also has a constructor which takes an ASCII string representing pixel values (useful for quickly initialising those digital clock demos):

#+BEGIN_SRC lua
  local block = blocks.Block:new('111 101 101 101 111')
#+END_SRC

=0= means =OFF=, =1= means =ON=, =.= means =THRU= and =/= means =FLIP=. Each token is a row; the tokens are separated by white space.

Side note: =shado= constructors are of the form =:new()= rather than =.new()=, in line with the main Lua documentation if not with many of the norns libraries. This assists with inheritance since =shado= objects like blocks often need to be subclassed.

** FRAMES

A *frame* is a stack of blocks, where items at the "top" obscure, or modify, items lower down. In fact, more generally, a frame is a stack of "renderables", which may be blocks, masks (described later), or other frames. This recursive structure allows a complex animation (say) to be constructed in a frame, and then for this frame to be moved around inside an enclosing frame. (This is how the "UFO" animation demo works.)

Unlike blocks and masks, frames do not have dimensions; a frame's "size" can be considered to be defined by the extents of any blocks or masks it, or its sub-frames, contain. The renderer does not care about the size of frames (or of blocks or masks, for that matter): it knows the size of the device it's addressing, and scans an area corresponding to the device's width and height, asking renderables to deliver their data. (So, an obvious way to hide a block is to move it beyond the grid's coordinates; there are better ways, outlined below.)

A frame renders its pixel values from the bottom to the top of its list; higher items modify what is below. Lamp values of =OFF= and =ON= obscure underlying pixels; =THRU= passes pixels through unchanged, =FLIP= inverts them. The resulting pixel values in a frame still have these four lamp values, which are then interpreted by any parent frame as part of its stack of renderables, and so on to the actual frame which is rendered. The renderer asks this outermost frame or block to "fold" lamp values to =ON= or =OFF= (i.e., render them against black) prior to outputting them.

The frame constructor has no arguments, so:

#+BEGIN_SRC lua
  local f = frames.Frame:new()
  renderer.render(f)
#+END_SRC

is an easy way to clear a grid (an empty frame renders to black).

Renderables are added using =add()=:

#+BEGIN_SRC lua
  local block = blocks.Block:new(.....)
  frame:add(block, 2, 3)
#+END_SRC

This adds a renderable to the *top* of a frame, in this case offset horizontally by one pixel and vertically by two (recall that Lua arrays originate from =1=).

=Frame:add()= returns the frame itself, allowing cascading:

#+BEGIN_SRC lua
  frame:add(b1):add(b2)
#+END_SRC

A renderable can only be added to any frame once - this is because the renderable's identity is used in subsequent operations like =show()=, =hide()= and =top()=. It is possible to get replicated tiling effects by creating multiple unique sub-frames (or masks) over a single block, and adding these to the main frame.

A frame allows a few operations on its stack of renderables:

#+BEGIN_SRC lua
  frame:top(item):	bring a renderable to the top
  frame:bottom(item):	send a renderable to the bottom
  frame:hide(item):	hide a renderable (make it transparent)
  frame:show(item):	show a renderable
  frame:remove(item):	remove a renderable from a frame
#+END_SRC

And finally, some sprite action:

#+BEGIN_SRC lua
  frame:moveBy(item, dx, dy):
                          move a renderable by this distance
  frame:moveTo(item, x, y):
                          move a renderable to this location
                          relative to the frame's origin
#+END_SRC

Since the renderables might themselves be frames, all sorts of nested movement and animation is possible. In addition, =hide()= and =show()= (or, depending on taste, =bottom()= and =top()=) can be used for animation: if you want to invert an entire grid, use a frame with a large

#+BEGIN_SRC lua
  blocks.Block:new(...):fill(types.LampState.FLIP)
#+END_SRC

at the top; =hide()= and =show()= calls on it will invert everything. If you want to switch between a number of different patterns, create them all in advance, making sure they are all the same size and are opaque (=ON= or =OFF= values only, no =THRU= or =FLIP=) and them call =frame:top()= on them in sequence.

** MASKS

*Masks* provide a simple way to crop blocks or (more likely) frames, useful if animated sub-frames are being tiled into a larger system. When a mask is built around a renderable (a block or frame - or another mask), the result is a port onto that renderable; anything outside the port is rendered as =THRU= (transparent). There is no change to the coordinate system of the contents of the port.

Masks are also renderables, and so may be incorporated into frames, cropped in other masks, and so on.

After:

#+BEGIN_SRC lua
  p = masks.Mask:new(renderable, x, y, width, height)
#+END_SRC

the renderable =p= will be the same as =renderable= for pixels whose column is between =x= and =x+width-1=, and whose row is between =y= and =y+height-1=. Outside those coordinates, the pixels of =p= will be =types.LampState.THRU=.

Mask objects also expose properties =x=, =y=, =width= and =height=, so that the cropping dimensions can be changed dynamically:

#+BEGIN_SRC lua
  p.x = 3
  p.height = p.height - 1
#+END_SRC

TODO: we'll probably protect inner fields and add getter/setter methods for this.

** BUTTON INPUT

The machinery for dealing with grid button presses works with the same structures as those used to drive the LEDs. Once a structure of blocks, frames and masks has been built to generate output, button presses can be routed into those same blocks, frames and masks. The assumption is that an application which draws some kind of animated widget with a bit of scripting code will also want to capture button presses locally in that same portion of code, with sensible local coordinates, regardless of what else might be going on in the system at the time.

Here's how it works: the Block, Frame and Mask classes can be augmented with a method like so:

#+BEGIN_SRC lua
  function Class:press(x, y, how) ... end
#+END_SRC

This represents a button press. Arguments =x= and =y= are location (1-based), while =how= is =1= for press and =0= for release. The built-in classes provide a method which does nothing; in order to respond to button presses, a block, frame or mask must have this method overridden, either via inheritance (fiddly) or simply by assigning this method directly into an object.

When a button is pressed, =shado= searches a tree of renderables in order, until it finds one which handles the press; once the press is handled, the search stops. Unless the renderable returns =false= from the call to =press()=, it is considered to have handled the event.

A block or mask can only handle a button press which falls within its declared coordinates; if the button press is outside the renderable's dimensions then the renderable never sees it. Frames are effectively infinite, so =press()= can be handled anywhere on the X-Y plane.

If a block measuring =width= by =height= is within range of a press, it will be passed X and Y coordinates within =(1, 1)= and =(width, height)=. If a mask receives a press, the coordinate =(1, 1)= coincides with the top-left corner of the mask area, rather than =(0, 0)= in the mask's own coordinate system.

A button press can be routed into any renderable: block, frame or mask. (A frame can handle presses directly or will pass them on to its children.) There's a class called =PressManager= which does this (and which also tracks on and off presses, as we describe later):

#+BEGIN_SRC lua
  local f = frames.Frame:new()
  ...
  local manager = PressManager(f)
  ...
  manager:press(x, y, how)
#+END_SRC

(A =PressManager= can be built over a completely different structure to the one being displayed - but in most cases you probably don't want to do that.)

If the =PressManager= is constructed around a block, the routing is simple: =Block:press()= gets called with the same coordinates that are passed in to =PressManager.press()= - these are presumably coming directly from the grid buttons.

Sending a press to a mask is slightly more complicated. The mask might accept the event, in which case the event is considered finished. If the mask returns =false=, the event is routed into the mask's *content* - another renderable - with the original coordinates, not the mask port coordinates - and the result is whatever the content renderable returns.

When a press is routed to a frame which does not handle the event, the frame starts calling into its stack of children in order, from top to bottom, mapping the coordinates so that each child will see =(1, 1)= for a press aligned with that child's top-left. As soon as a child returns a non-=false= value, the event is over. If any child returns =false=, the frame tries the next, and so on. If all children return =false= (or if the frame is empty), the result is =false=.

Objects which are hidden inside a frame (via =frame:hide(...)=) will not receive button presses. (This is a change from the original =shado= behaviour.) A block which is completely transparent (all cell values are =LampState.THRU=) *will* receive =press()= events: light status has no effect on button routing, although the code can decide whether to handle or refuse a press. There are situations where this is useful: to capture the raw coordinates of a grid's buttons regardless of the objects in a frame, just add a grid-sized transparent layer to the top and use this to deal with the =press()= events.

*** PRESS TRACKING

A note about button presses and releases. If a button press is routed to an object deep within a visual heirarchy, then that structure can change dramatically before the button is released. For example, suppose that a block receives a button press, and its =press()= method actually moves the block within its enclosing frame. The button release could have block coordinates different to those of the press; or the release might be completely out of range of the new location of the block.

We have implemented some machinery which guarantees a fundamental property of button handling: if a renderable receives - and handles - a button press at coordinates =(x, y)=, then it will always receive the corresponding release at the same coordinates. It does not matter if the renderable has been moved out of range of the button - or even if the renderable has been completely removed from the object heirarchy - the PressManager keeps hold of it, purely so that the =press(x, y, 0)= can be sent to the original recipient of =press(x, y, 1)= with matching coordinates.

A side-effect of this is that, if an object chooses to ignore a press (by returning =false= from a =press(x, y, 1)= call) then it will never see the release call - that call will always go to the actual object which dealt with the press (if any).

Another side-effect is that an object might receive multiple button-on presses at the same coordinates. If a =press(1, 1, 1)= event to a block causes it to move, another button on the grid might now map to the Block's top-left, and might send a second =press(1, 1, 1)=. In other words, it's quite possible for button-on events to be duplicated in the same location - and the release events will also be duplicated. This makes perfect sense to the PressManager so it had better make sense to your Lua scripts.

** VARIABLE BRIGHTNESS

To cater for variable-brightness devices (beginning with the original arc controllers), we have generalised the values of the =LampState= type. The constructor is

#+BEGIN_SRC lua
  LampState:new(level, blend)
#+END_SRC

where =level= is a brightness value from =0.0= to =1.0=, and =blend= is a kind of normalised transparency: =0.0= is fully opaque, =1.0= is fully transparent, and =-1.0= is a full inversion of whatever is below. Interpolating opacity from =0.0= to =1.0= gradually reveals the inverse of the lower layer.

The "preset" non-greyscale lamp values are defined thus:

#+BEGIN_SRC lua
  LampState.OFF = LampState:new(0, 0)
  LampState.ON = LampState:new(1, 0)
  LampState.THRU = LampState:new(0, 1)
  LampState.FLIP = LampState:new(0, -1)
#+END_SRC
