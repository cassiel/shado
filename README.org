-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent

* =shado=

The =shado= grid and arc rendering library in Lua for the monome norns (and shields - and [[https://monome.org/docs/grid/studies/seamstress/][seamstress]]).

=shado= is a compositing and sprite library for grid and arc devices attached to the [[https://monome.org/docs/norns/][monome norns]]. It is based on an [[https://github.com/cassiel/net.loadbang.shado/][earlier release]] written in Java as an OSC subsystem; this version is written in Lua to run on norns natively.

To get a sense for what's achievable in =shado= (as of 13 years ago with first-generation monome kit), take a look at this [[http://vimeo.com/1338613][video]].

The file [[README.MANUAL.org][README.MANUAL]] will eventually be the manual for =shado=; for now, it contains an explanation of the =shado= architecture - quite possibly, along with the [[https://cassiel.com/shado/][API docs]] and the examples, just about enough to start writing =shado= "programs".

** Usage

On norns, download this repository into =/home/we/dust/code= (at least until we get a proper package built) - it must have the name =shado=. If you download and unpack the ZIP file the folder will be named something like `shado-main`, so rename it.

Maiden can also download and install the package directly, via:

#+BEGIN_SRC shell-script
  ;install https://github.com/cassiel/shado
#+END_SRC

(Note: this does an ~https:~ Git checkout - for on-device development it's better to get a ~git@~ one, perhaps via ~git~ over ~ssh~ - and maiden also plants a ~.project~ with some metadata.)

Once that's done, from the norms screen, load the =shado= script. Don't try to load any of the other files - they're an assortment of tests and support scripts. The main =shado= script is a container for a number of simple and (mostly) interactive demo applications (living in the =apps= directory). The on-screen instructions will introduce the individual demos, and the buttons will scroll between them.

The =shado= script has a variable to flag whether it's running under seamstress (which is missing a few bits of norns library): set this to =true= or =false= according to taste.

** Testing Setup

Install =luarocks= (the Lua package manager) and =luaunit= (the unit testing library). On norns:

#+BEGIN_SRC shell-script
  sudo apt-get install luarocks
  sudo luarocks install luaunit
#+END_SRC

Note: the command-line Lua on norns is currently version 5.1. (You might be able to upgrade it.) The Lua used for scripting is 5.3. The unit tests should work fine under 5.1.

To set up the tests on macOS (with Homebrew):

#+BEGIN_SRC shell-script
  brew install luarocks
  luarocks install luaunit
#+END_SRC

We also use the library =inspect= for some debugging in the tests; install as above.

** Unit Testing

From the directory containing =shado= (on the norns that would be =/home/we/dust/code=), test with:

#+BEGIN_SRC shell-script
  lua shado/test-all.lua
#+END_SRC

** Documentation

We've used [[https://github.com/stevedonovan/LDoc][LDoc]], which can be cleanly installed with:

#+BEGIN_SRC shell-script
  [sudo] luarocks install ldoc
#+END_SRC

From the main =shado= directory, a =ldoc -v .= reads from =config.ld= and generates docs in =docs= (which is where GitHub Pages wants them).

** Comparison with Java shado

- All coordinates have origin or top-left at =(1, 1)= (Lua-style) rather than =(0, 0)= (every other language in the world-style).
- Rename: =ViewPort= is now called =Mask=, which is a bit snappier and more indicative of what it actually does.
- In the Java implementation, =press()= is a boolean method returning =true= for press handled, =false= otherwise. Since Lua is more dynamic, we can have press-handled as the default by omitting any =return= statement - i.e., a result of =nil= implies handled. In fact, =false= is the only return value to mark a press as not handled.

We considered changing function/methods names from Java-style camel-case to Lua-style snake-case, but the latter doesn't seem to be totally idiomatic, and it appeals to keep the existing names to reflect the package's Java heritage.
